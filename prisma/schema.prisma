// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  EDUCATOR
  STUDENT
}

enum ExamStatus {
  OPEN
  GRADING
  GRADED
}

enum QuizStatus {
  OPEN
  GRADING
  GRADED
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String
  role     Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  examsCreated    Exam[]           @relation("ExamCreator")
  examsEnrolled   Exam[]           @relation("ExamEnrollment")
  quizSubmissions QuizSubmission[]
  Session         Session[]
  Quiz            Quiz[]
}

model Session {
  id           String   @id @default(cuid())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token        String   @unique
  expires      DateTime
  lastActivity DateTime @default(now())
  userAgent    String?
  ipAddress    String?

  @@index([userId])
}

model Exam {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  status      ExamStatus @default(OPEN)
  startDate   DateTime
  endDate     DateTime
  minScore    Float      @default(80)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creator   User   @relation("ExamCreator", fields: [creatorId], references: [id])
  creatorId Int
  students  User[] @relation("ExamEnrollment")
  quizzes   Quiz[]

  @@index([creatorId])
}

model Quiz {
  id          Int        @id @default(autoincrement())
  title       String
  instruction String
  question    String
  filename    String?
  status      QuizStatus @default(OPEN)
  maxScore    Float      @default(100) // Maximum score possible for this quiz

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  exam        Exam             @relation(fields: [examId], references: [id])
  examId      Int
  submissions QuizSubmission[]
  User        User?            @relation(fields: [userId], references: [id])
  userId      Int?

  @@index([examId])
}

model QuizSubmission {
  id       Int     @id @default(autoincrement())
  fileUrl  String // URL to the uploaded file
  fileName String // Original file name
  score    Float? // Student's score for this submission
  feedback String? // Feedback from educator or AI

  isCorrect Boolean? // Whether the submission is correct
  aiVerdict Boolean? // AI's assessment of correctness
  aiNote    String? // AI's notes/feedback

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student   User @relation(fields: [studentId], references: [id])
  studentId Int
  quiz      Quiz @relation(fields: [quizId], references: [id])
  quizId    Int

  @@unique([studentId, quizId]) // Ensures one submission per student per quiz
  @@index([studentId])
  @@index([quizId])
}
